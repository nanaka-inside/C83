基本的操作
----------
基本だからこそ、しっかり覚えておきたい。

cp
~~~
ファイルやディレクトリをコピーします。コピーするだけなら問題ないんですが...というところ。デフォルトでは、コピーした時点でのタイムスタンプになり、ファイルの所有者もコピー時のユーザになります。ただし上書きの時は所有者が保存されます。細かい仕様を把握しておかないと事故が起きるので [#cpa]_ 、もし本番環境でやるなら事前テストすることをおすすめします。

更新されたファイルだけ上書きしたい、上書きするかどうか聞いて欲しい、すでにあるファイルは上書きしないでほしい、と言った要望はマニュアルを参照 [#cp-sym]_ 。

.. [#cpa] ディレクトリをとあるディレクトリにコピーするときに、コピー先のディレクトリの中にコピー元のディレクトリのファイルをコピーしちゃってファイルが混ざる事象など
.. [#cp-sym] -sでシンボリックリンクを張ることが出来ると書いてあったし、実際に出来た

dd
~~
ファイルのコピーとか変換とか行います。ファイルと言っていますが、デバイスにも対応しています。よくあるディスクのコピーはこんな感じ

.. code-block:: sh
   
   # dd if=/dev/sda1 /dev/sdb1


「変換」はどこいったんじゃ！というツッコミもあるかと思いまして、例を挙げます。tsortででてきたtextファイルを使います。

.. code-block:: sh
   
   $ dd conv=ucase if=text of=test2

これでtextの中身が大文字になります！やったね！！ [#dd]_ 

.. [#dd] ucase以外にも、ebcdicやibmといったオプションもあります



install
~~~~~~~
ファイルの属性を指定しつつファイルをコピーすることが出来ます。このコマンドを使うときが来たらmanを見ましょう。


mv
~~~
ファイルの移動を行います。副次的な作用としてファイルの名前を変えることが出来ます。cpのオプションと似ていますので、細かい説明は省略します。

rm
~~~
ダークフレイムマスターであった頃の黒歴史を清算するコマンドです [#rm-k]_ [#ext3grep]_ 。

.. [#rm-k] 黒歴史をバージョン管理していたら別
.. [#ext3grep] ext3grepというコマンドがあるそうですよ

lsコマンドの説明の時に作ったファイルを消してみましょう。
 
.. code-block:: sh
   
   $ ls -b 
   \r
   $ rm Ctrl-v Enter # ctrl を押しながら v を押しキーボードから手を離す
   $ # 一呼吸おいてEnterを押す。さらにもう一度Enter



shred
~~~~~~
爆ぜたり弾けたりしていた黒歴史を強力に清算するコマンドです。ハードディスクの中身を何度も上書きを行って黒歴史を清算し、復元される可能性を減らします [#shred]_ 。

.. [#shred] ただし、人々の記憶には残っているでしょう。物理破壊がより有効です（ハードディスクのことです


スペシャルファイルタイプ
------------------------
シンボリックリンクやFIFO、ディレクトリなどのファイルの操作を行います。


link
~~~~~
linkシステムコールを経由してハードリンクをつくります。ツッコミを期待されも困ります。


ln
~~~
シンボリックリンクを作成するコマンドと言われても困ります。マニュアル曰く、ファイル間にリンクをつくる、とあります。
ハードリンクとシンボリックリンクの違いは覚えておきましょう [#ln-i]_ 。
一つ付け加えることとして、シンボリックリンクの上書きオプション(-f)があります。ディレクトリの場合、上書きできず、シンボリックリンクディレクトリの下にシンボリックリンクが出来ているというオチが待っています。

そのほかのオプションとしては、シンボリックリンクからハードリンクを作成するオプションというのがありましたが誰得感強いです。

.. [#ln-i] inodeも絡んできます


mkdir
~~~~~
ディレクトリを作ります。押さえておくべきオプションは二つ。パーミッションを指定する ``-m`` 、存在しない2階層以上のディレクトリを作る ``-p`` です [#mkdir]_ 。

.. [#mkdir] 自分がつくったディレクトリにchmod -x とかしちゃ駄目だぞ！おっちゃんとの約束だ！

mkfifo
~~~~~~
名前付きパイプを作ります。パイプとは、 ``|`` です [#mkfifo]_ 。

.. [#mkfifo] これは名前なしパイプ(unnamed pipe)というらしい

具体例を示します。

.. code-block:: sh

   $ mkfifo pipe
   $ ls -l > pipe & ; cat < pipe

2行目のコマンドは、わざとワンライナーで書いていますが、別のセッションで試すと感動が増します。 ``;`` の前後のコマンドを逆にしても動作します [#mkfifo-cite]_ 。

.. [#mkfifo-cite] "Introduction to Named Pipes" http://www.linuxjournal.com/article/2156

mknod
~~~~~~
FIFOや、キャラクタースペシャルファイル、ブロックスペシャルファイルを作ります。
キャラクタースペシャルファイルとは、キーボードやマウスなどの入力や出力を扱うファイルです。キャラクタースペシャルファイルは1バイトずつの読み出しですが、ブロックスペシャルファイルはある程度の塊としてデータを取り扱います。

下記、一番はじめの b がブロックスペシャルファイル、 c がキャラクタースペシャルファイルです。それぞれハードディスク、zeroです [#mknod-g]_ 。

.. code-block:: sh

   $ ls -l /dev/hda
   brw-r----- 1 root disk 3, 0  May 22  2012 /dev/hda

   $ ls -l /dev/zero
   crw-rw-rw- 1 root root 1, 5  May 22  2012 /dev/zero 

.. [#mknod-g] なんかこう、目を合わせたら命令されそうですけど。zeroだけに原宿に戻せって。HAHAHA


readlink
~~~~~~~~~
ファイルを引数に与えると、絶対パスを表示します。もしもつかうときがやってきたら使ってみて下さい。

rmdir
~~~~~
``rm -rf`` でいいじゃないかいいじゃないか [#rmdir]_ 。

.. [#rmdir] えーっ

unlink
~~~~~~
システムが提供しているunlinkを使ってファイルを削除します。

ファイルの属性を変更
--------------------
chown
~~~~~
ファイルのオーナーとグループを変更します。 ``--reference=filename`` でfilenameとそっくりのオーナーとグループになります。シンボリックリンクを追うかどうかのオプションもあり。ファイルのオーナーを変えるので基本的にroot(あるいはsudo)で操作。ちなみに、ownerとgroupのセパレータは ``:`` が一般ですが、筆者は ``.`` 派。

chgrp
~~~~~
ファイルのグループを変更。こちらにも  ``--reference`` オプションがあります。

chmod
~~~~~
ファイルのパーミッションを変更します。set-group-IDとか使わないから忘れてしまったなぁ。

touch
~~~~~
呼吸を止めて一秒なコマンドです [#touchk]_ 。ファイルのタイムスタンプを変更するコマンドです。オプションを使えば、ファイルのatime,mtimeを任意に変更することが出来ます。ただし、時間の指定の方法は覚えるしかないです [#touch]_ 。ここでも ``--reference`` オプションが使えます。

.. [#touchk] 違います
.. [#touch] dateコマンドの日付フォーマットとも違っていて若干もにょる
 

ディスク容量
------------
マニュアル曰く、ディスクは無限のデータ容量を保持できない、だそうです。確かに無限の容量があったら必要ないかもしれないですね。ネットワークも無限ではないので、duくらいは残して欲しい。さて、dfコマンドをたたく必要がなくなる日は来るのか。

df
~~
ディスクの空き容量を示します。よく使うオプションは、 ``df -h`` です。ディスクの使用量、空き容量がGBやTB単位で出ます。たまに使うオプションは、 ``df -i`` です。inodeの使用量を表示します。ファイルをフォーマットするときにinode数が足りるかどうか、心にとめておくといいことがあるかもしれません。そして、inode枯渇問題はしばしば深刻な問題を引き起こします。
ファイルシステムの形式(ext3やtmpfsなど)を表示するときは、 ``df -T`` とします。

du
~~
カレントディレクトリにあるファイルのサイズをすべて表示します。 ``du -h`` さえ覚えていればなんとかなります。
個々のファイルサイズはいらないよ、というときはsummarizeオプションをつけて ``du -hs`` で所望の結果。

stat
~~~~~
ファイルが作られた日時や編集された時間を表示するコマンド、と思いきや、ファイルのあらゆる属性を表示するコマンドです。と、思いきやほとんどlsで事足りるのでした。statでとれる属性は、割り当てられているブロックサイズやinode番号、atimeのエポックタイム数値などが取得できます。API的に取得するにはちょうどいいコマンドです。


sync
~~~~~
メモリにバッファされているデータをディスクに書き込みます。サーバをshutdownするまえに sync sync sync するという文化で年齢が分かるかもしれません。

truncate
~~~~~~~~
ファイルのサイズを減らしたり増やしたり。ボクと契約して10Mのダミーデータを作ってよ！と言われても慌てず騒がず ``truncate -s 10M file`` して提出して下さい [#truncate]_ 。

.. [#truncate] [問題] 提出したデータの中身はどうなっているでしょうか


文字を表示
-----------
文字列を表示するコマンドです。

echo
~~~~
与えられた文字を標準出力に書き出します。デフォルトだと、最後に改行が入るので、ハッシュ値を作るときには注意して下さい。 ``\n`` (new line) といった特殊文字を出力するためには下記のように。

.. code-block:: sh
   
   $ echo -e "a\nb\nc"
     a
     b
     c


printf
~~~~~~
C言語のprintfに似たフォーマットで文字列を出力します。たとえばこんな感じ

.. code-block:: sh
   
   $ printf "%d" "'a"
   97


yes
~~~
Ctrl-cが押されるまで、文字列を延々と表示します。

.. code-block:: sh
   
   $ yes asumisu


条件
----
false
~~~~~
何もしない、成功しない。

.. code-block:: sh

   $ false 
   $ echo $? 
   1

true
~~~~
何もしない、成功。シェルスクリプトのif文で、何もしないときに使います。そのときは、trueと同じ意味のビルトインコマンド ``:`` で代用することがよくあります。


test
~~~~
コマンドの戻り値を判定して条件分岐します。コマンドとしては、 $ test ``expression`` や、ビルトインコマンドとして [ ``expression`` ] が利用できます。expressionについては、マニュアルにちゃんと書いてあるので読んで下さい。指定されたファイルが存在するか、数値の大小比較などができます。

.. code-block:: sh
   
   $ HOGE=str
   $ if [ "xstr" = x$HOGE ] ; then echo $HOGE ; else ; echo $HOGE is not str ; fi 
   str

HOGEという変数がstrかどうかを比較するサンプルです。$HOGEが空だと ``[]`` の中で比較する文字列がなくsyntax errorになるので慣習としてxを付けています。 ``[]`` の返値が1か0で条件分岐します。つまり、 ``[ "xstr" = x$HOGE ]`` というコマンドが実行可能です。

expr
~~~~
式を評価します。といっても最近はもっぱら ``$()`` や ``$(())`` を使っています。例は、joinの時に出てきています。括弧二つの方は何となく数値計算ができるので電卓代わりに使っています。 ``echo $((12*34))`` といった感じです。

リダイレクション
----------------
シェルのリダイレクションです。コマンドとしては1個しかないとはこれいかに [#redi]_ 。

.. [#redi] ``|`` や ``>`` はシェル組み込みなので、しゃーなしだな

tee
~~~~
出力を複数のファイルやプロセスに渡すコマンド。teeはTのことで、T型に出力という意味です [#teea]_ 。
コマンドの結果をファイルに書き込むときよく使うリダイレクション ``> file`` のとき、何が出力されるのか、別の端末を開いてtailするまで分かりません。ファイルにも書きつつ、標準出力にも出して欲しいとき使います。
じつは ``join`` のサンプルのところで出てきているのでサンプルはそちらを参考にして下さい。なお、 ``-a`` オプションはファイルへの追記を意味しています。

.. [#teea] Tの字形をみるとわかってくる

複数のファイルやプロセスに渡せるということなので、こんなコマンドも実行可能です。ファイルをダウンロードして標準出力に投げて、sha1sumとmd5sumでハッシュ値をとり、dvd.isoにダウンロードしたファイルを書き出し。

.. code-block:: sh

    wget -O - http://example.com/dvd.iso \
      | tee >(sha1sum > dvd.sha1) \
            >(md5sum > dvd.md5) \
      > dvd.iso



