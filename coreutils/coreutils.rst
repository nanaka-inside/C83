
Coreutils 大全
==============

どうも@tboffice [#twitter-tboffice]_ です。前回はasteriskでオレオレコールセンターの作り方を書いていました。今回は話題をガラッと変えてCoreutils大全と称してCoreutilsを一通り解説してみたいと思います。
たとえば、

* cdのオプションはいくつあるでしょう
* catを単独で打ったときの挙動は？
* factorコマンドは何をするでしょう

などなど。一部だけなら知っているけど全部知らない人のためにCoreutilsの中身を一通り説明します。
また、筆者が使っていて便利だなと思うTipsも載っけました。Coreutilsから往々に脱線していますが、そのあたりは目をつぶってやってください。それでは、深遠なるCoreutilsの世界へようこそ。


Coreutilsとは
-------------
lsやcatなど、linuxでは欠かせないコマンドをまとめたパッケージです。Fileutils, Shellutils, Textutilsを統合したものです。CoreutilsのChangeLogをみたところ、一番古い日付は2002-07-01でした。おそらくそのころに統合されたのでしょう。メジャーバージョンは2003年4月にバージョン5として登場しました。

ほかにUtils系ってないの？という話をすると、binutils(stringsコマンドとかが含まれている), findutils(findとかxargsとか), inetutils(pingとか)があります。 


本校の構成
----------
最初にcoreutilsパッケージのコマンドに共通のオプションを解説し、coreutilsのマニュアルの通りにコマンドを並べています。


共通のオプション
-----------------
coreutilsに含まれているコマンド共通のオプションです。


--help 
~~~~~~
たとえば ls のコマンドのオプションを調べたいとき


.. code-block:: sh

   $ ls --help


簡易ヘルプはこのオプションをつかえば問題☆解決。え？問題が解決しない？そんなときはこんな感じです。


.. code-block:: sh

   $ man ls
   $ info coreutils 目的のコマンド


infoコマンドを打った後はEmacsのキーバインドなのでそこさえ気をつければ良いコマンドだと思いますよ（白目

--version
~~~~~~~~~~
バージョンを表示します。

--
~~~~
このオプションを打った後は、オプションが無効になります。
たとえば、こんなコマンドを打ったとき


.. code-block:: sh

   $ ls -l -- -l


-lというファイルあるいはディレクトリをls -lで表示します。


.. core-block:: sh

   $ mkdir -- -l



とやると、``-l``というディレクトリが出来ます。touchでも同様。

-
~~~
オプションじゃないよ！\footnote{ってマニュアルに書いてある}。オプションに見えるだけだよ？ホントだよ？すたんだーどいんぷっとを待つ記号だよ！受け取った結果はコマンドがよろしく処理するよ！
たとえばこんな感じだよ！あとで出てくるから覚えておいてね！


.. code-block:: sh

   $ sort - 
   b # 打つべし
   a # 打つべし
   c # 打つべし
   Ctrl-d # って打つと下記のように表示されるよ！
   a
   b
   c


ファイルまるまる出力系
----------------------
ファイルが高まる出力系のコマンドです。ファイルの意識を高めましょう\footnote{どうやるんだろう}

cat
~~~
情報系の授業や講義があるとlinuxの基礎としてほぼ間違いなく出てくるコマンドですね。マニュアルの説明には、**ファイル( - は標準入力)あるいは標準入力を標準出力にコピーする**コマンドと書かれています。
fileというファイルの中身を出力するときにはこうします。

:: 

   cat file


ここで出てきたものは標準出力です。
次に、マニュアルにあるオプションの読み方を説明します。マニュアルには


:: 

   cat [option] [file]...


とあります\footnote{だいたいほかのコマンドのマニュアルも同様に書かれています}。


[]
  この括弧で囲まれている部分は省略可能です。オプションはいくつ付けてもよいです。
...
  この記号は引数がいくつでもいいよって言ってます


つまりこんな感じでコマンドを作ることが出来ます。


.. code-block:: sh

   $ cat -A -n hogefile fugafile piyofile


主なオプションとして行末がどこまで入ってるか分からないから表示して -> -E
行数を付けて -> -n
タブ文字も表示して欲しいなぁ -> -T
改行文字も表示して欲しいなー -> -v

オプションのFILE部分に - を入れると標準入力になります。fとgというファイルがあって、
cat f - g 
このようにコマンドが実行されたときは、fの内容を表示、標準入力の内容表示、ctrl-d(入力の終わり)を押したらgの内容が表示されます。

cat単独で打ったときは…標準入力と標準出力を体感してください。動作については省略します。


tac
~~~
linuxの講義があっても出てくる頻度はかなり低いのではないでしょうか。
catのあとのtac。お察しの通りです。早速、実行してみましょう。ファイルを作るのが面倒なのでechoしてます。


.. code-block:: sh

   $ echo -e "a\nb\nc" | tac
   c
   b
   a


はい、ファイルの内容を上下逆に出します。1行分の文字の並びを逆にするには、 rev コマンドを使ってください。
誰得魔方陣の例。


.. code-block:: sh

   $ echo -e "2 9 4\n7 5 3\n6 1 8" | tac | rev 


単語単位で逆にするには、

.. code-block:: sh

   $ tac -r -s '[^a-zA-z0-9\-]' file


revと同じ効果をtacでやるには下記。ただし日本語の2バイト文字列も逆にするので化けます。おちゃめさーーん（何


.. code-block:: sh

   $ tac -r -s '.\|' myfile
   

上記二つの例は下記に載っていました。
http://www.gnulinuxclub.org/index.php?option=com_content&task=view&id=189&Itemid=50


nl
~~~
行番号を振ってくれるコマンド。単に実行した場合はこんな感じです。

.. code-block:: sh

   $ nl /etc/issue                                                                
   1  CentOS release 5.7 (Final)
   2  Kernel \r on an \m
    

デフォルトだと、空行には番号がつかないです。なお、cat -b fileと同じです。
オプションに``-b a``を付けると空行でも行番号がつきます。いろいろオプションがあるので値を変更してみてください。

.. code-block:: sh

  $ echo -e "hoge\n\nfuga\npiyo" | nl -b a -n rz -s " hoge: " -v 3 -w 3
    003 hoge: hoge
    004 hoge: 
    005 hoge: fuga
    006 hoge: piyo


od
~~~
ファイルを8進数や16進数で表示するコマンド。デフォルトでは8進数で表示。
なんとなくxxdを使ってしまって、出番のないコマンドのような...


.. code-block:: sh

  $ od /etc/issue
  0000000 062503 072156 051517 071040 066145 060545 062563 032440
  0000020 033456 024040 064506 060556 024554 045412 071145 062556
  0000040 020154 071134 067440 020156 067141 056040 005155 000012
  0000057


base64
~~~~~~
データを印刷できる形式に変換するコマンド、とマニュアルには書いてあります。
RFC 4648に則ってデータを変換するコマンドで、133%データが大きくなります。デコードも出来ます。

.. code-block:: sh

   $ base64 /etc/issue | base64 --decode -i
   CentOS release 5.7 (Final)
   Kernel \r on an \m



体裁を整える系
--------------

fmt
~~~
テキストファイルの文字を適当に折り返してくれるコマンド。すでに改行されてしまっているテキストファイルでもなんとかしてくれます。
wikipediaのサンプルが易しいです。
http://en.wikipedia.org/wiki/Fmt


pr
~~~
印刷用にヘッダとフッタを自動的に追加してくれてくれるコマンド。RFCみたいな文章がすぐに出来るよ！プレーンテキストすばらしい！と脳内で大好評のコマンドです。お試しあれ。
pr | pr してもヘッダとフッタが二重につくだけなのでやめてください。


fold
~~~~
テキストファイルをぴったりの文字数で改行するコマンド。fmtは空気を読んで、単語をぶったぎらないようにしていますが、このコマンドは空気を読まずにぶった切ります。fmtの様な挙動をさせるには、-sをつけるとある程度空気を読んでくれます。fmtは引用符の中は改行しませんが、foldは改行します。


ファイルの一部を出力
--------------------

head
~~~~~
ファイルの最初の10行を表示するコマンド。
-n 5で先頭5行を表示。-c 10KB で先頭何キロバイトを表示するか指定します。headコマンドを宗教上の理由で打ちたくない人は、sed 10q と打ってください。
-n のあとにマイナス値を打つとどうなるでしょうか。環境にもよりますが...自分でやってみてください。


tail
~~~~~
ファイルの最後の10行を表示するコマンド。サーバ管理者は毎日打っていると言っても過言ではないコマンド。
-f オプションをつけることによって、ターゲットのファイルに対して追加された文字が出てきます。ちなみに複数のファイルを食わせることができるので、アクセスログファイルとアクセスエラーログファイルの両方をtail -f で表示することも可能。パイプでつないで特定の文字列だけ出力することも可能。

.. code-block:: sh
   
   tail -f apache-access.log apache-error.log | grep --color -E "(==|192.168.0.1)"


ログファイルから==または、192.168.0.1という文字列を抜き出しています。"=="というのは、やってみてのお楽しみ。
参考 http://aerith.mydns.jp/regrets/2008/12/tail-color.html

tailコマンドといえば、tailfコマンドに触れないわけにはいかないでしょう。tail -f コマンドと同じような働きをする tailf コマンドがあります。
結論から言うと、最新のcoreutilsを使っているならどっちも変わりありません\footnote{coreutils version 7.5でinotifyに対応した模様。http://dev.ariel-networks.com/Members/inoue/tailf/}。どちらも inotify イベントを受け取って処理するようになっています。
もしも、対象のファイルが消えてしまうときは、ファイルを読み直すオプションを使いましょう。


.. code-block:: sh

   tail -F filename


余談。-r  オプションがあったのですが、coreutilsには実装されていません。tacコマンドを使ってください。

split
~~~~~~


csplit
~~~~~~~

ファイルの要約系
----------------

wc
~~~
通称トイレコマンド。wc -l が有名すぎて、wc単体の結果についてはmanを引かないと忘れてることが多い。

sum
~~~

cksum
~~~~~

md5sum
~~~~~~

sha1sum
~~~~~~~~

sha2系
~~~~~~~

ソート・アート・オンライン系
----------------------------
ファイルの中身をソートするコマンド郡。某SAOとは関係ないです。


sort
~~~~~

shuf
~~~~~
shufって入ってないんだよなーなんでだろう。と思ったら、Coreutilsの6.4から新しく加入。
CentOS5.4とかを使っていると 5.97とかなので入ってない！
ひー

uniq
~~~~

comm
~~~~
ptx
~~~~
tsort
~~~~~

テーブルの欄操作
----------------
cut
~~~
paste
~~~~~
join
~~~~

キャラクタ操作
----------------

tr
~~~

expand
~~~~~~~
unexpand
~~~~~~~~

ファイルリスト表示
------------------
ls
~~~
あああああ。


dir
~~~
あれ？windowsのコマンドじゃないの？

vdir
~~~~
dircolors
~~~~~~~~~

基本的操作
----------
cp
~~~
ln
~~~
ln -sしか使わなくね？

mkdir
~~~~~
mkfifo
~~~~~~
mknod
~~~~~~
readlink
~~~~~~~~~
rmdir
~~~~~
unlink
~~~~~~

ファイルの属性を変更
--------------------
chown
~~~~~
chgrp
~~~~~
chmod
~~~~~
touch
~~~~~

ディスク容量
------------
df
~~
du
~~
デュフフのduと覚えている

stat
~~~~~
自分自身で触ってatime変えたりするので注意

sync
~~~~~
3 syncなんて古い人間はいねがー

truncate
~~~~~~~~

文字を表示
-----------

echo
~~~~

printf
~~~~~~
yes
~~~
yes!アスミス

条件
----
false
~~~~~
true
~~~~
test
~~~~
expr
~~~~

リダイレクション
----------------
tee
~~~~

ファイル名操作
--------------
basename
~~~~~~~~
dirname
~~~~~~~
pathchk
~~~~~~~~
mktemp
~~~~~~
realpath
~~~~~~~~

作業の状況
----------
訳が難しい。http://www.geocities.jp/fut_nis/html/coreutils-ja/Working-context.html
から借りた。

pwd
~~~~
stty
~~~~
printenv
~~~~~~~~
tty
~~~

ユーザの情報
-------------
id
~~~
logname
~~~~~~~
whoami
~~~~~~
わたしはだあれ？コマンド

groups
~~~~~~
users
~~~~~
who
~~~
誰？

システム情報
------------

date
~~~~~
arch
~~~~
nproc
~~~~~
あれ、新しめのコマンドぽい

uname
~~~~~~
hostname
~~~~~~~~
打ってみれば分かる

hostid
~~~~~~
uptime
~~~~~~

SELinux関連
-----------
chcon
~~~~~
runcon
~~~~~~
らんこん

コマンド生成を制御する
----------------------
chroot
~~~~~~
env
~~~
nice
~~~~
nohup
~~~~~
stdbuf
~~~~~~
timeout
~~~~~~~~
小数入れられたっけ？

プロセス操作
-------------
kill
~~~~
ネットワーク系のプロセスに -9 すんなよ！ってばっちゃがいってた
たしかmysql

遅刻
----
sleep
~~~~~

数値関連
--------
factor
~~~~~~
素因数分解をがんばってやってくれる。おわり

seq
~~~~
よく使う


共通のオプション(その2)
------------------------

.. note::
   注釈ですnote

.. warning::
   警告です。warning

.. rubric:: 脚注
.. [#twitter-tboffice] http://twitter.com/tboffice
.. [#core-nage1] 筆者が調べるのがおっくうなだけともいう
.. [#core-utils] ちなみにこの原稿はreStructureTextで書かれていますが、これを処理するのはDocutilsだったり。gnuじゃないけどね
.. [#utils-combine] "The last separate versions were fileutils-4.1.11, textutils-2.1, and sh-utils-2.0.15. The first major release of coreutils-5.0 was announced on Fri, 4 April 2003." (http://www.gnu.org/software/fileutils/fileutils.html)
